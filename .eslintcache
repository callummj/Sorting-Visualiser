[{"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\index.js":"1","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\reportWebVitals.js":"2","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\App.js":"3","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Controlbar.js":"4","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Algorithmbar.js":"5","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Graph.js":"6","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Bubblesort.js":"7","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Selectionsort.js":"8","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Bottombar.js":"9","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Bar\\Bar.js":"10","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Heapsort.js":"11","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Quicksort.js":"12","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Insertionsort.js":"13","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Mergesort.js":"14","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Radixsort.js":"15"},{"size":518,"mtime":1614246549263,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":7016,"mtime":1614259211692,"results":"19","hashOfConfig":"17"},{"size":565,"mtime":1612388993002,"results":"20","hashOfConfig":"17"},{"size":864,"mtime":1612142924574,"results":"21","hashOfConfig":"17"},{"size":6728,"mtime":1614252687842,"results":"22","hashOfConfig":"17"},{"size":962,"mtime":1614159531903,"results":"23","hashOfConfig":"17"},{"size":760,"mtime":1612868347518,"results":"24","hashOfConfig":"17"},{"size":1793,"mtime":1612953756757,"results":"25","hashOfConfig":"17"},{"size":1707,"mtime":1614030003996,"results":"26","hashOfConfig":"17"},{"size":1536,"mtime":1613421652961,"results":"27","hashOfConfig":"17"},{"size":2026,"mtime":1613054142387,"results":"28","hashOfConfig":"17"},{"size":1176,"mtime":1614161425535,"results":"29","hashOfConfig":"17"},{"size":1840,"mtime":1612868347472,"results":"30","hashOfConfig":"17"},{"size":1216,"mtime":1612951309189,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1vc1v3x",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"34"},"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\index.js",[],["73","74"],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\reportWebVitals.js",[],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\App.js",["75","76","77","78","79","80","81"],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Controlbar.js",["82"],"import React from 'react';\r\nimport './UI Bars.css';\r\n\r\n\r\nexport default function Controlbar(props) {\r\n\r\n    const handleClick = e => props.generateData(true);\r\n\r\n    return (\r\n        <div>\r\n            <nav className=\"Toolbar\">\r\n                <button value=\"generateData\" onClick={props.generateDataCallback}>Generate New Data</button>\r\n                <button onClick={props.clearCallback}>Clear</button>\r\n                <button id={\"start\"} value=\"startSort\" onClick={props.startSortCallback}>Sort</button>\r\n            </nav>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Algorithmbar.js",[],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Graph.js",["83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103"],"import {useState, useRef, useEffect} from 'react';\r\nimport Bar from \"./Bar/Bar\";\r\nimport './Graph.css'\r\n\r\nexport default function Graph(props){\r\n\r\n    const startData = props.startData;\r\n    let sortState = props.sort;\r\n\r\n    let steps = props.steps;\r\n    let [complete, setComplete] = useState(false);\r\n    let [sort, setSort] = useState(sortState);\r\n    let [index, setIndex] = useState(0);\r\n    let [data, setData] = useState(startData);\r\n    let speed = props.speed;\r\n\r\n\r\n    //Start the sort\r\n    if ( (sort == false) && (props.sort == true) ){\r\n        setSort(true);\r\n    }else if ( (sort == true) && (props.sort == false) ){\r\n        setSort(false);\r\n    }\r\n\r\n\r\n    // Use useRef for mutable variables that we want to persist\r\n    // without triggering a re-render on their change\r\n\r\n\r\n    const requestRef = useRef();\r\n    const previousTimeRef = useRef();\r\n\r\n    let step = steps[index]; //0=index\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if (props.reset == true){\r\n            setComplete(false);\r\n            props.resetCompletedCallback();\r\n            setIndex(0);\r\n        }\r\n\r\n        const animate = time => {\r\n            if (previousTimeRef.current != undefined) {\r\n                setIndex(prevIndex => (prevIndex + 1));\r\n\r\n            }\r\n            previousTimeRef.current = time;\r\n            requestRef.current = requestAnimationFrame(animate);\r\n        }\r\n\r\n        if (sort == true && !complete){\r\n            requestRef.current = requestAnimationFrame(animate);\r\n            if (index == steps.length-1){\r\n                setComplete(true);\r\n                setSort(false);\r\n                //props.stopSort()\r\n            }\r\n            return () => cancelAnimationFrame(requestRef.current);\r\n        }\r\n\r\n    }, );\r\n\r\n\r\n\r\n\r\n\r\n    let dataToPass = getDataToPass(props, setSort, setComplete, steps, index);\r\n\r\n\r\n\r\n\r\n    console.log(\"data to pass: \" + dataToPass + \" index at: \" + index + \" steps length: \" + steps.length + \" for algorithm: \" + props.title)\r\n    return (\r\n        <>\r\n            {\"local sort: \" + sort}\r\n            {speed}\r\n            {\"index: \" + index}\r\n            {\"id: \" + props.graphID}\r\n            {drawBars(dataToPass, props, props.title, props.decoration, complete)}\r\n        </>\r\n    )\r\n\r\n}\r\n\r\nconst getDataToPass = (props, setSort, setComplete, steps, index) =>{\r\n    let dataToPass;\r\n    //If generate data has been called\r\n    if (props.reset == true){\r\n        //Sort should be set to false from above\r\n        //setIndex(0);\r\n        dataToPass = props.startData;\r\n        //setComplete(false);\r\n    }else{\r\n        dataToPass = steps[index];\r\n\r\n\r\n        //Because of how requestAnimationFrame works, it will loop over one more time\r\n        if (dataToPass == undefined){\r\n            dataToPass = steps[index-1];\r\n        }\r\n\r\n    }\r\n\r\n    return dataToPass;\r\n}\r\n\r\n//Method to calculate swaps\r\nconst getDataToPassg = (data, step) =>{\r\n    let tempData = [...data]; //So we do not manipulate the original data\r\n    let focus = step[0];\r\n    let flag = step[1];\r\n    for (let i = 0; i < tempData.length; i++) {\r\n        let swapped = false;\r\n        let focusCheck = focus[0];\r\n        if (focusCheck === i) {\r\n            if (flag === true) {\r\n\r\n                //Get the two indexes and assign them a variable so it's more readable\r\n                let indexOne = [focus[0]];\r\n                let indexTwo = [focus[1]];\r\n\r\n\r\n                console.log(\"index1: \" + indexOne + \" index2: \" + indexTwo)\r\n                let temp = data[indexOne];\r\n                tempData[indexOne] = tempData[indexTwo];\r\n                tempData[indexTwo] = temp;\r\n\r\n                console.log(\"swapped: \" + tempData[indexOne] + \" and \" + tempData[indexTwo])\r\n                swapped = true;\r\n            } else {\r\n                // console.log(\"NOT SWAPPING\")\r\n            }\r\n        }\r\n    }\r\n    return data;\r\n}\r\n\r\nfunction calculateGraph(data, step){\r\n    let tempData = [...data];\r\n    //console.log(\"tempdata: \" + tempData)\r\n    let focus = step[0];\r\n    let flag = step[1];\r\n    console.log(\"focus: \" + focus + \" and flag: \" + flag)\r\n\r\n    //console.log(flag === true)\r\n\r\n    //console.log(\"Josh test1: \" + typeof flag.valueOf());\r\n    //console.log(\"Josh test2:\" + typeof true);\r\n    for (let i = 0; i < tempData.length; i++){\r\n        let swapped = false;\r\n        let focusCheck = focus[0];\r\n        if (focusCheck === i){\r\n            if (flag === true){\r\n                // console.log(\"SWAPPING\")\r\n                //swap\r\n\r\n\r\n                let indexOne = [focus[0]];\r\n\r\n                let indexTwo = [focus[1]];\r\n\r\n\r\n                console.log(\"index1: \" + indexOne + \" index2: \" + indexTwo)\r\n                let temp = data[indexOne];\r\n                tempData[indexOne] = tempData[indexTwo];\r\n                tempData[indexTwo] = temp;\r\n\r\n                console.log(\"swapped: \" + tempData[indexOne] + \" and \" + tempData[indexTwo])\r\n                swapped = true;\r\n            }else{\r\n                // console.log(\"NOT SWAPPING\")\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    console.log(\"before data: \" + data)\r\n    console.log(\"TEMPDATA TO RETURN: \" + tempData);\r\n    return (tempData);\r\n}\r\n\r\n\r\nconst drawBars = (data, props, algorithm, decoration, complete) => {\r\n\r\n    let focus = [];\r\n\r\n    //Has a focus\r\n    if (data.length == 2){\r\n        focus = data[1];\r\n        data = [...data[0]]\r\n    }\r\n    let height = data[0].max + \" px\";\r\n\r\n    let key = 0;\r\n\r\n    const bars = data.map((value, index) =>\r\n        <>\r\n            <Bar index={index} value = {value} decoration = {decoration} complete = {complete} focus = {focus}/>\r\n        </>\r\n\r\n    );\r\n\r\n    if (decoration == \"bars\"){\r\n        return(\r\n            <div className={\"bars-wrapper\"} style={{height: {height}}}>\r\n                <h1>{\"Completed: \" + complete}</h1>\r\n                <button className={\"close-button\"} value={algorithm} onClick={()=>props.removeAlgorithm(props.graphID)}>x</button>\r\n                <div className={\"bars\"} style={{\r\n                    height: `${(Math.max(data))}`}}>\r\n                    {bars}\r\n                </div>\r\n            </div>\r\n        );\r\n    }else if (decoration == \"numerics\"){\r\n        return(\r\n            <div id = {\"sort\"}>\r\n                <h1>{\"sort: \" + props.sort}</h1>\r\n                <button className={\"close-button\"} value={algorithm} onClick={()=>props.removeAlgorithm(props.graphID)}>x</button>\r\n                <div className={\"numerics\"} style={{\r\n                    height: `${(Math.max(data))}`}}>{\r\n                    data.map(i => (\r\n                        <Bar value = {i} decoration = {decoration} key = {key++} focus = {focus}/>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Bubblesort.js",[],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Selectionsort.js",["104"],"function SelectionSort(originalData){\r\n    let data = [...originalData];\r\n    let steps = [];\r\n    steps.push([...data]);\r\n    let length = data.length;\r\n\r\n    for(let i = 0; i < length; i++) {\r\n\r\n        let smallestInt = i;\r\n        for(let j = i+1; j < length; j++){\r\n            if(data[j] < data[smallestInt]) { //if the index on the right array is smaller the current record then overwrite this\r\n                smallestInt=j;\r\n            }\r\n        }\r\n\r\n        if (smallestInt != i) {\r\n            let temp = data[i];\r\n            data[i] = data[smallestInt];\r\n            data[smallestInt] = temp;\r\n\r\n        }steps.push(\r\n            [...data]);\r\n    }\r\n    steps.push(\r\n        [...data]\r\n    );\r\n    return steps;\r\n}export default SelectionSort;\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Bottombar.js",["105","106"],"import React from 'react';\r\nimport './UI Bars.css'\r\n\r\nimport {useState} from 'react';\r\n\r\n//Control bar for animation speed/type etc.\r\nfunction Bottombar(props){\r\n\r\n    /*\r\n    <input type=\"range\" min=\"1\" max=\"100\" className=\"slider\" id={'speedController'} onInput={sliderController}/>\r\n    */\r\n\r\n    const [playPauseIcon, setPlayPauseIcon] = useState('pause');\r\n\r\n    const playPause = () =>{\r\n        if (playPauseIcon == \"pause\"){\r\n            setPlayPauseIcon(\"play_arrow\")\r\n        }else if (playPauseIcon == \"play_arrow\"){\r\n            setPlayPauseIcon(\"pause\")\r\n        }\r\n        props.playPauseCallback();\r\n    }\r\n\r\n\r\n\r\n    const skip = (e) =>{\r\n        props.skip(e.target.value)\r\n    }\r\n    const updateSpeed = (e) =>{\r\n        props.updateSpeedCallback(e.target.value);\r\n    }\r\n\r\n    const toggleDecoration = () =>{\r\n        props.toggleDecoration();\r\n    }\r\n    return(\r\n\r\n        <div id = {'bottombar'}>\r\n\r\n            <div id={'speed-controller'}>\r\n                <h3 id={'speedLabel'}>Speed:</h3>\r\n                <button onClick={updateSpeed} value={500}>Slow</button>\r\n                <button onClick={updateSpeed} value={75}>Medium</button>\r\n                <button onClick={updateSpeed} value={20}>Fast</button>\r\n                <button onClick={toggleDecoration}>Change decoration</button>\r\n            </div>\r\n            <div id={'play-controller'}>\r\n                <button onClick = {skip} value={\"backwards\"}><i className=\"material-icons\">skip_previous</i></button>\r\n                <button onClick = {playPause}><i className=\"material-icons\">{playPauseIcon}</i></button>\r\n                <button onClick={skip} value={\"forwards\"}><i className=\"material-icons\">skip_next</i></button>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}export default Bottombar;\r\n\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Bar\\Bar.js",["107"],"import './Bar.css'\r\nfunction Bar(props) {\r\n\r\n    let index = props.index;\r\n    let i = props.value;\r\n    let decoration = props.decoration;\r\n\r\n    //console.log(\"decoratiom: \" + decoration)\r\n\r\n   // console.log(\"focus: \" + props.focus)\r\n\r\n\r\n    if (decoration == \"bars\"){\r\n        return(\r\n            <svg width=\"1\" height={getBarHeight(i)} className={\"arraybar\"}>\r\n                <rect width=\"400\" height={getBarHeight(i)} style={{\r\n                    height: `${getBarHeight(i)}em`, fill: `${getColour(index, props.focus, props.complete)}` //[] = the focus variable\r\n                }} />\r\n            </svg>)\r\n    }else{\r\n        return (\r\n            <div className={\"Numeric-Bar\"}>\r\n                <h3 style={{color: `${getColour(index, props.focus, props.complete)}`}}>{\" \" + i + \", \"}</h3>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}export default Bar\r\n\r\n\r\n//Returns blue if the data at hand is a focus/\r\nfunction getColour(index, focus, complete){\r\n    //console.log(\"get colour complete var: \" + complete)\r\n    if (complete){\r\n       // console.log(\"complete\")\r\n        return \"green\"\r\n    }else{\r\n        if (focus.includes(index)){\r\n            return \"blue\";\r\n        }else{\r\n           // console.log(\"not blue\")\r\n        }\r\n        /*\r\n        if(Array.isArray(focus)){\r\n            for (let i =0; i < focus.length; i++){\r\n                console.log(\"focus: \" + focus[i] + \" \" + index)\r\n                if (focus[i] === index){\r\n                    return \"blue\"\r\n                }\r\n            }\r\n        }*/\r\n        return \"orange\";\r\n    }\r\n\r\n}\r\n\r\n//Calculates appropriate bar height depending on how many algorithms are being compared.\r\nfunction getBarHeight(i) {\r\n    return i;\r\n}\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Heapsort.js",["108"],"import React from \"react\";\r\n\r\n//INITIAL: https://www.w3resource.com/javascript-exercises/searching-and-sorting-algorithm/searching-and-sorting-algorithm-exercise-3.php\r\n\r\nlet arrayLength = 0;\r\nlet steps;\r\n\r\nfunction heapRoot (input, i) {\r\n    const left = 2 * i + 1\r\n    const right = 2 * i + 2\r\n    let max = i\r\n\r\n    if (left < arrayLength && input[left] > input[max]) {\r\n        max = left\r\n    }\r\n\r\n    if (right < arrayLength && input[right] > input[max]) {\r\n        max = right\r\n    }\r\n\r\n    if (max !== i) {\r\n        swap(input, i, max)\r\n        heapRoot(input, max)\r\n    }\r\n}\r\n\r\nfunction swap (input, indexA, indexB) {\r\n    [input[indexA], input[indexB]] = [input[indexB], input[indexA]]\r\n    let focus = [indexA, indexB];\r\n    steps.push([\r\n        [...input],\r\n        [...focus]\r\n    ]);\r\n\r\n}\r\n\r\nfunction heapSort (originalInput) {\r\n    let input = [...originalInput];\r\n    steps = [];\r\n    arrayLength = input.length\r\n\r\n\r\n    for (let i = Math.floor(arrayLength / 2); i >= 0; i -= 1) {\r\n        heapRoot(input, i)\r\n    }\r\n\r\n    for (let i = input.length - 1; i > 0; i--) {\r\n        swap(input, 0, i)\r\n        arrayLength--\r\n\r\n        heapRoot(input, 0)\r\n    }\r\n\r\n    let focus = [];\r\n    steps.push([\r\n        [...input],\r\n        [...focus]\r\n    ]);\r\n\r\n    return steps;\r\n}\r\n\r\n\r\n/*\r\nfunction heapSort(data){\r\n    let steps = [];\r\n\r\n    function swap(data, A, B){\r\n        let temp1 = data[A]\r\n        let temp2 = data[B]\r\n    }\r\n\r\n    function heapRoot(data, index){}\r\n    return steps;\r\n}\r\n*/\r\n\r\nexport default heapSort;\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Quicksort.js",["109"],"import React from \"react\";\r\n\r\n\r\n//Driver code for Quicksort\r\n\r\n\r\nfunction Quicksort(originalData) {\r\n    let data = [...originalData];\r\n    function QuickSort(array, left, right){\r\n        let index;\r\n        if (array.length > 1) {\r\n            index = partition(array, left, right); //partition the array to find the index\r\n            if (left < (index - 1)) { //more elements on the left side of the pivot\r\n                QuickSort(array, left, index - 1);\r\n            }\r\n            if (index < right) { //if the right side is larger than the left\r\n                QuickSort(array, index, right);\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    //uses a temp function which swaps two indexes in the array then pushes the swap to the\r\n    function swap(data, leftItem, rightItem){\r\n        let temp = data[leftItem];\r\n        data[leftItem] = data[rightItem];\r\n        data[rightItem] = temp;\r\n        let change = [leftItem, rightItem];\r\n        steps.push([\r\n            [...data],\r\n            [...change]\r\n        ]);\r\n        return data\r\n    }\r\n\r\n    //splitting the array into subarrays\r\n\r\n    function partition(data, left, right) {\r\n        let pivot = data[Math.floor((right + left) / 2)] //Find the pivot of the array (centre element)\r\n\r\n        while (left <= right) { //while the left value\r\n            while (data[left] < pivot) {\r\n                left++;\r\n            }\r\n            while (data[right] > pivot) {\r\n                right--;\r\n            }\r\n            if (left <= right) {\r\n                data = swap(data, left, right); //Swap elements\r\n                left++;\r\n                right--;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    let steps = [];\r\n    let change = [];\r\n    steps.push([\r\n        [...data],\r\n        [...change]\r\n    ]);\r\n    QuickSort(data, 0, (data.length)-1);\r\n\r\n    steps.push([\r\n        [...data],\r\n        [...change]\r\n    ]);\r\n    return steps;\r\n}export default Quicksort;\r\n\r\n\r\n//https://www.geeksforgeeks.org/quick-sort/\r\n\r\n\r\n\r\n\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Insertionsort.js",["110"],"\r\nimport React from \"react\";\r\n\r\n\r\n\r\nfunction Insertionsort(originalData){\r\n\r\n    let data = [...originalData];\r\n\r\n\r\n    let steps = stepsGenerator(data);\r\n\r\n    return steps;\r\n\r\n}export default Insertionsort;\r\n\r\n\r\n//Goes through the array, generating the instance of the array at each step and returns an array containing these instances in chronological order.\r\n//i = first iterator\r\n//j = second iterator where to insert\r\nfunction stepsGenerator(data){\r\n    let steps = [];\r\n    steps.push([[...data], []]);\r\n    for (let i = 1; i < data.length; i++) {\r\n        let change = [];\r\n        let current = data[i]; //split between sorted/unsorted list\r\n        let j = (i-1);\r\n        let temp = data;\r\n        while ((j > -1) && (current < data[j])) {\r\n            temp[j + 1] = temp[j]; //insert element\r\n            j--;\r\n        }\r\n        temp[j + 1] = current;\r\n\r\n        data = temp;\r\n        change = [j+1];\r\n        steps.push([\r\n            [...data],\r\n            [...change]\r\n        ]);\r\n    }\r\n    let change = [];\r\n    steps.push([\r\n        [...data],\r\n        [...change]\r\n    ]);\r\n    return steps;\r\n}\r\n\r\n//https://www.geeksforgeeks.org/binary-insertion-sort/\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Mergesort.js",["111","112","113"],"\r\n//TEMP CODE FOR MERGESORT\r\n\r\n//initalise steps here so they are in scope\r\nlet steps;\r\n\r\nfunction MergeSortDriver(data) {\r\n    steps = [];\r\n    mergeSort(data, 0, data.length);\r\n    let change = [];\r\n    steps.push([\r\n        [...data],\r\n        [...change]\r\n    ]);\r\n    console.log(\"got mnerge steps\")\r\n    return steps;\r\n}\r\n\r\n\r\n//first break down to subarrays\r\nfunction mergeSort(array, low, high) {\r\n    if (high - low > 1) {\r\n        //let middle = array[Math.flsoor((high + low) / 2)] //Find the pivot of the array (centre element)\r\n        let middle = low + ((high - low) >> 1); //calculate the middle of each subarray\r\n        mergeSort(array, low, middle);\r\n        mergeSort(array, middle, high);\r\n        merge(array, low, middle, high);\r\n    }\r\n}\r\n\r\n\r\n\r\n//merge function for subarrays\r\nfunction merge(data, low, middle, high) {\r\n    let tempArray = [];\r\n    let length = middle - low;\r\n    let i;\r\n    let tempMiddle;\r\n    let tempLow;\r\n    // save left subarray\r\n    for (i = 0; i < length; i++) {\r\n        tempArray[i] = data[low + i];\r\n        let change = [i]\r\n        steps.push([\r\n            [...data]\r\n        ]);\r\n    }\r\n\r\n\r\n    //begin merge of the atomic arrays\r\n    i = 0;\r\n    tempMiddle = middle;\r\n    tempLow = low;\r\n\r\n\r\n    while ((i < length) && (tempMiddle < high)) {\r\n\r\n        if (tempArray[i] <= data[tempMiddle]) {\r\n            data[tempLow++] = tempArray[i++];\r\n        } else {\r\n            data[tempLow++] = data[tempMiddle++];\r\n        }\r\n        let change = [tempLow];\r\n        steps.push([\r\n            [...data],\r\n        ]);\r\n    }\r\n    while (i < length) {\r\n        data[tempLow++] = tempArray[i++];\r\n        let change = [data[tempLow]];\r\n        steps.push([\r\n            [...data],\r\n        ]);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default MergeSortDriver\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Radixsort.js",["114","115"],"import React from \"react\";\r\n\r\n\r\n//TEMP\r\nfunction Radixsort(orignalData){\r\n    let data = [...orignalData];\r\n\r\n    let RADIX;\r\n\r\n    // default radix is then because we usually count to base 10\r\n    if (RADIX === undefined || RADIX < 1) {\r\n        RADIX = 10\r\n    }\r\n\r\n\r\n\r\n    let steps = [];\r\n    let focus = [];\r\n\r\n    var maxLength = false\r\n    var placement = 1\r\n\r\n    while (!maxLength) {\r\n        maxLength = true\r\n        var buckets = []\r\n\r\n        for (var i = 0; i < RADIX; i++) {\r\n            buckets.push([])\r\n        }\r\n\r\n        for (var j = 0; j < data.length; j++) {\r\n            var tmp = data[j] / placement\r\n            buckets[Math.floor(tmp % RADIX)].push(data[j])\r\n\r\n            if (maxLength && tmp > 0) {\r\n                maxLength = false\r\n            }\r\n        }\r\n\r\n        var a = 0\r\n        for (var b = 0; b < RADIX; b++) {\r\n            var buck = buckets[b]\r\n            for (var k = 0; k < buck.length; k++) {\r\n                data[a] = buck[k]\r\n                a++\r\n                steps.push([...data])\r\n            }\r\n        }\r\n\r\n        placement *= RADIX\r\n        console.log(\"running\")\r\n    }\r\n    console.log(\"radix complete\")\r\n    return steps\r\n\r\n} export default Radixsort;\r\n",{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":90,"column":13,"nodeType":"122","messageId":"123","endLine":90,"endColumn":17},{"ruleId":"124","severity":1,"message":"125","line":121,"column":28,"nodeType":"126","messageId":"127","endLine":121,"endColumn":30},{"ruleId":"128","severity":1,"message":"129","line":140,"column":9,"nodeType":"130","messageId":"131","endLine":157,"endColumn":10},{"ruleId":"132","severity":1,"message":"133","line":167,"column":35,"nodeType":"134","messageId":"135","endLine":167,"endColumn":37},{"ruleId":"132","severity":1,"message":"133","line":169,"column":41,"nodeType":"134","messageId":"135","endLine":169,"endColumn":43},{"ruleId":"132","severity":1,"message":"133","line":176,"column":30,"nodeType":"134","messageId":"135","endLine":176,"endColumn":32},{"ruleId":"132","severity":1,"message":"133","line":179,"column":33,"nodeType":"134","messageId":"135","endLine":179,"endColumn":35},{"ruleId":"120","severity":1,"message":"136","line":7,"column":11,"nodeType":"122","messageId":"123","endLine":7,"endColumn":22},{"ruleId":"120","severity":1,"message":"137","line":14,"column":10,"nodeType":"122","messageId":"123","endLine":14,"endColumn":14},{"ruleId":"120","severity":1,"message":"138","line":14,"column":16,"nodeType":"122","messageId":"123","endLine":14,"endColumn":23},{"ruleId":"132","severity":1,"message":"133","line":19,"column":16,"nodeType":"134","messageId":"135","endLine":19,"endColumn":18},{"ruleId":"132","severity":1,"message":"133","line":19,"column":41,"nodeType":"134","messageId":"135","endLine":19,"endColumn":43},{"ruleId":"132","severity":1,"message":"133","line":21,"column":22,"nodeType":"134","messageId":"135","endLine":21,"endColumn":24},{"ruleId":"132","severity":1,"message":"133","line":21,"column":46,"nodeType":"134","messageId":"135","endLine":21,"endColumn":48},{"ruleId":"120","severity":1,"message":"139","line":33,"column":9,"nodeType":"122","messageId":"123","endLine":33,"endColumn":13},{"ruleId":"140","severity":1,"message":"141","line":36,"column":5,"nodeType":"122","endLine":36,"endColumn":14,"suggestions":"142"},{"ruleId":"132","severity":1,"message":"133","line":38,"column":25,"nodeType":"134","messageId":"135","endLine":38,"endColumn":27},{"ruleId":"132","severity":1,"message":"143","line":45,"column":41,"nodeType":"134","messageId":"135","endLine":45,"endColumn":43},{"ruleId":"132","severity":1,"message":"133","line":53,"column":18,"nodeType":"134","messageId":"135","endLine":53,"endColumn":20},{"ruleId":"132","severity":1,"message":"133","line":55,"column":23,"nodeType":"134","messageId":"135","endLine":55,"endColumn":25},{"ruleId":"132","severity":1,"message":"133","line":90,"column":21,"nodeType":"134","messageId":"135","endLine":90,"endColumn":23},{"ruleId":"132","severity":1,"message":"133","line":100,"column":24,"nodeType":"134","messageId":"135","endLine":100,"endColumn":26},{"ruleId":"120","severity":1,"message":"144","line":110,"column":7,"nodeType":"122","messageId":"123","endLine":110,"endColumn":21},{"ruleId":"120","severity":1,"message":"145","line":131,"column":17,"nodeType":"122","messageId":"123","endLine":131,"endColumn":24},{"ruleId":"120","severity":1,"message":"146","line":140,"column":10,"nodeType":"122","messageId":"123","endLine":140,"endColumn":24},{"ruleId":"120","severity":1,"message":"145","line":171,"column":17,"nodeType":"122","messageId":"123","endLine":171,"endColumn":24},{"ruleId":"132","severity":1,"message":"133","line":190,"column":21,"nodeType":"134","messageId":"135","endLine":190,"endColumn":23},{"ruleId":"132","severity":1,"message":"133","line":205,"column":20,"nodeType":"134","messageId":"135","endLine":205,"endColumn":22},{"ruleId":"132","severity":1,"message":"133","line":216,"column":26,"nodeType":"134","messageId":"135","endLine":216,"endColumn":28},{"ruleId":"132","severity":1,"message":"143","line":16,"column":25,"nodeType":"134","messageId":"135","endLine":16,"endColumn":27},{"ruleId":"132","severity":1,"message":"133","line":16,"column":27,"nodeType":"134","messageId":"135","endLine":16,"endColumn":29},{"ruleId":"132","severity":1,"message":"133","line":18,"column":33,"nodeType":"134","messageId":"135","endLine":18,"endColumn":35},{"ruleId":"132","severity":1,"message":"133","line":13,"column":20,"nodeType":"134","messageId":"135","endLine":13,"endColumn":22},{"ruleId":"120","severity":1,"message":"147","line":1,"column":8,"nodeType":"122","messageId":"123","endLine":1,"endColumn":13},{"ruleId":"120","severity":1,"message":"147","line":1,"column":8,"nodeType":"122","messageId":"123","endLine":1,"endColumn":13},{"ruleId":"120","severity":1,"message":"147","line":2,"column":8,"nodeType":"122","messageId":"123","endLine":2,"endColumn":13},{"ruleId":"120","severity":1,"message":"148","line":43,"column":13,"nodeType":"122","messageId":"123","endLine":43,"endColumn":19},{"ruleId":"120","severity":1,"message":"148","line":63,"column":13,"nodeType":"122","messageId":"123","endLine":63,"endColumn":19},{"ruleId":"120","severity":1,"message":"148","line":70,"column":13,"nodeType":"122","messageId":"123","endLine":70,"endColumn":19},{"ruleId":"120","severity":1,"message":"147","line":1,"column":8,"nodeType":"122","messageId":"123","endLine":1,"endColumn":13},{"ruleId":"120","severity":1,"message":"149","line":18,"column":9,"nodeType":"122","messageId":"123","endLine":18,"endColumn":14},"no-native-reassign",["150"],"no-negated-in-lhs",["151"],"no-unused-vars","'temp' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'handleClick' is assigned a value but never used.","'data' is assigned a value but never used.","'setData' is assigned a value but never used.","'step' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setComplete'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props, sort, complete, index, steps.length] as a second argument to the useEffect Hook.",["152"],"Expected '!==' and instead saw '!='.","'getDataToPassg' is assigned a value but never used.","'swapped' is assigned a value but never used.","'calculateGraph' is defined but never used.","'React' is defined but never used.","'change' is assigned a value but never used.","'focus' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"153","fix":"154"},"Add dependencies array: [props, sort, complete, index, steps.length]",{"range":"155","text":"156"},[1736,1736],", [props, sort, complete, index, steps.length]"]