[{"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\index.js":"1","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\reportWebVitals.js":"2","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\App.js":"3","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Controlbar.js":"4","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Algorithmbar.js":"5","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Graph.js":"6","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Bubblesort.js":"7","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Selectionsort.js":"8","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Bottombar.js":"9","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Bar\\Bar.js":"10","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Heapsort.js":"11","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Quicksort.js":"12","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Insertionsort.js":"13","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Mergesort.js":"14","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Radixsort.js":"15"},{"size":500,"mtime":499162500000,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":5952,"mtime":1612825089605,"results":"19","hashOfConfig":"17"},{"size":565,"mtime":1612388993002,"results":"20","hashOfConfig":"17"},{"size":864,"mtime":1612142924574,"results":"21","hashOfConfig":"17"},{"size":4792,"mtime":1612825217959,"results":"22","hashOfConfig":"17"},{"size":732,"mtime":1612824218633,"results":"23","hashOfConfig":"17"},{"size":715,"mtime":1612277004995,"results":"24","hashOfConfig":"17"},{"size":875,"mtime":1612476648100,"results":"25","hashOfConfig":"17"},{"size":1619,"mtime":1612822976490,"results":"26","hashOfConfig":"17"},{"size":1350,"mtime":1610642369412,"results":"27","hashOfConfig":"17"},{"size":1915,"mtime":1610209259183,"results":"28","hashOfConfig":"17"},{"size":1099,"mtime":1610210781651,"results":"29","hashOfConfig":"17"},{"size":1797,"mtime":1612706603567,"results":"30","hashOfConfig":"17"},{"size":1165,"mtime":1611878278871,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1vc1v3x",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"34"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"34"},"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\index.js",[],["71","72"],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\reportWebVitals.js",[],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\App.js",["73","74","75","76","77"],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Controlbar.js",["78"],"import React from 'react';\r\nimport './UI Bars.css';\r\n\r\n\r\nexport default function Controlbar(props) {\r\n\r\n    const handleClick = e => props.generateData(true);\r\n\r\n    return (\r\n        <div>\r\n            <nav className=\"Toolbar\">\r\n                <button value=\"generateData\" onClick={props.generateDataCallback}>Generate New Data</button>\r\n                <button onClick={props.clearCallback}>Clear</button>\r\n                <button id={\"start\"} value=\"startSort\" onClick={props.startSortCallback}>Sort</button>\r\n            </nav>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Algorithmbar.js",[],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Graph.js",["79","80","81","82","83","84","85"],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Bubblesort.js",["86"],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Selectionsort.js",["87"],"function SelectionSort(data){\r\n    let steps = [];\r\n    steps.push([...data]);\r\n    let length = data.length;\r\n\r\n    for(let i = 0; i < length; i++) {\r\n\r\n        let smallestInt = i;\r\n        for(let j = i+1; j < length; j++){\r\n            if(data[j] < data[smallestInt]) { //if the index on the right array is smaller the current record then overwrite this\r\n                smallestInt=j;\r\n            }\r\n        }\r\n\r\n        if (smallestInt != i) {\r\n            let temp = data[i];\r\n            data[i] = data[smallestInt];\r\n            data[smallestInt] = temp;\r\n\r\n        }steps.push(\r\n            [...data]);\r\n    }\r\n    steps.push(\r\n        [...data]\r\n    );\r\n    return steps;\r\n}export default SelectionSort;","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Bottombar.js",[],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Bar\\Bar.js",["88"],"function Bar(props) {\r\n\r\n    let key = props.key;\r\n    let i = props.value;\r\n    let decoration = props.decoration;\r\n\r\n    //console.log(\"decoratiom: \" + decoration)\r\n\r\n   // console.log(\"focus: \" + props.focus)\r\n    if (decoration == \"bars\"){\r\n        return(\r\n            <svg width=\"1\" height={getBarHeight(i)} className={\"arraybar\"}>\r\n                <rect width=\"400\" height={getBarHeight(i)} style={{\r\n                    height: `${getBarHeight(i)}em`, fill: `${getColour(key, props.focus, props.complete)}` //[] = the focus variable\r\n                }} />\r\n            </svg>)\r\n    }else{\r\n        return (\r\n            <div >\r\n                <h1>{\" \" + i + \", \"}</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}export default Bar\r\n\r\n\r\n//Returns blue if the data at hand is a focus/\r\nfunction getColour(index, focus, complete){\r\n    //console.log(\"get colour complete var: \" + complete)\r\n    if (complete){\r\n       // console.log(\"complete\")\r\n        return \"green\"\r\n    }else{\r\n        if (focus.includes(index)){\r\n           // console.log(\"blue\")\r\n            return \"blue\";\r\n        }else{\r\n           // console.log(\"not blue\")\r\n        }\r\n        /*\r\n        if(Array.isArray(focus)){\r\n            for (let i =0; i < focus.length; i++){\r\n                console.log(\"focus: \" + focus[i] + \" \" + index)\r\n                if (focus[i] === index){\r\n                    return \"blue\"\r\n                }\r\n            }\r\n        }*/\r\n        return \"orange\";\r\n    }\r\n\r\n}\r\n\r\n//Calculates appropriate bar height depending on how many algorithms are being compared.\r\nfunction getBarHeight(i) {\r\n    return i;\r\n}\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Heapsort.js",["89"],"import React from \"react\";\r\n\r\nlet arrayLength = 0;\r\nlet steps;\r\n\r\nfunction heapRoot (input, i) {\r\n    const left = 2 * i + 1\r\n    const right = 2 * i + 2\r\n    let max = i\r\n\r\n    if (left < arrayLength && input[left] > input[max]) {\r\n        max = left\r\n    }\r\n\r\n    if (right < arrayLength && input[right] > input[max]) {\r\n        max = right\r\n    }\r\n\r\n    if (max !== i) {\r\n        swap(input, i, max)\r\n        heapRoot(input, max)\r\n    }\r\n}\r\n\r\nfunction swap (input, indexA, indexB) {\r\n    [input[indexA], input[indexB]] = [input[indexB], input[indexA]]\r\n    let focus = [indexA, indexB];\r\n    steps.push([\r\n        [...input],\r\n        [...focus]\r\n    ]);\r\n\r\n}\r\n\r\nfunction heapSort (input) {\r\n\r\n    steps = [];\r\n    arrayLength = input.length\r\n\r\n\r\n    for (let i = Math.floor(arrayLength / 2); i >= 0; i -= 1) {\r\n        heapRoot(input, i)\r\n    }\r\n\r\n    for (let i = input.length - 1; i > 0; i--) {\r\n        swap(input, 0, i)\r\n        arrayLength--\r\n\r\n        heapRoot(input, 0)\r\n    }\r\n\r\n    let focus = [];\r\n    steps.push([\r\n        [...input],\r\n        [...focus]\r\n    ]);\r\n\r\n    return steps;\r\n}\r\n\r\n\r\n/*\r\nfunction heapSort(data){\r\n    let steps = [];\r\n\r\n    function swap(data, A, B){\r\n        let temp1 = data[A]\r\n        let temp2 = data[B]\r\n    }\r\n\r\n    function heapRoot(data, index){}\r\n    return steps;\r\n}\r\n*/\r\n\r\nexport default heapSort;","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Quicksort.js",["90"],"import React from \"react\";\r\n\r\n\r\n//Driver code for Quicksort\r\n\r\n\r\nfunction Quicksort(data) {\r\n\r\n    function QuickSort(array, left, right){\r\n        let index;\r\n        if (array.length > 1) {\r\n            index = partition(array, left, right); //partition the array to find the index\r\n            if (left < (index - 1)) { //more elements on the left side of the pivot\r\n                QuickSort(array, left, index - 1);\r\n            }\r\n            if (index < right) { //if the right side is larger than the left\r\n                QuickSort(array, index, right);\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    //uses a temp function which swaps two indexes in the array then pushes the swap to the\r\n    function swap(data, leftItem, rightItem){\r\n        let temp = data[leftItem];\r\n        data[leftItem] = data[rightItem];\r\n        data[rightItem] = temp;\r\n        let change = [leftItem, rightItem];\r\n        steps.push([\r\n            [...data],\r\n            [...change]\r\n        ]);\r\n        return data\r\n    }\r\n\r\n    //splitting the array into subarrays\r\n\r\n    function partition(data, left, right) {\r\n        let pivot = data[Math.floor((right + left) / 2)] //Find the pivot of the array (centre element)\r\n\r\n        while (left <= right) { //while the left value\r\n            while (data[left] < pivot) {\r\n                left++;\r\n            }\r\n            while (data[right] > pivot) {\r\n                right--;\r\n            }\r\n            if (left <= right) {\r\n                data = swap(data, left, right); //Swap elements\r\n                left++;\r\n                right--;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    let steps = [];\r\n    QuickSort(data, 0, (data.length)-1);\r\n    let change = [];\r\n    steps.push([\r\n        [...data],\r\n        [...change]\r\n    ]);\r\n    return steps;\r\n}export default Quicksort;\r\n\r\n\r\n//https://www.geeksforgeeks.org/quick-sort/\r\n\r\n\r\n\r\n\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Insertionsort.js",["91"],"\r\nimport React from \"react\";\r\n\r\n\r\n\r\nfunction Insertionsort(data){\r\n\r\n\r\n    let steps = stepsGenerator(data);\r\n\r\n    return steps;\r\n\r\n}export default Insertionsort;\r\n\r\n\r\n//Goes through the array, generating the instance of the array at each step and returns an array containing these instances in chronological order.\r\n//i = first iterator\r\n//j = second iterator where to insert\r\nfunction stepsGenerator(data){\r\n    let steps = [];\r\n    for (let i = 1; i < data.length; i++) {\r\n        let change = [];\r\n        let current = data[i]; //split between sorted/unsorted list\r\n        let j = (i-1);\r\n        let temp = data;\r\n        while ((j > -1) && (current < data[j])) {\r\n            temp[j + 1] = temp[j]; //insert element\r\n            j--;\r\n        }\r\n        temp[j + 1] = current;\r\n\r\n        data = temp;\r\n        change = [j+1];\r\n            steps.push([\r\n            [...data],\r\n            [...change]\r\n        ]);\r\n    }\r\n    let change = [];\r\n    steps.push([\r\n        [...data],\r\n        [...change]\r\n    ]);\r\n    return steps;\r\n}\r\n\r\n//https://www.geeksforgeeks.org/binary-insertion-sort/","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Mergesort.js",["92","93","94"],"\r\n//TEMP CODE FOR MERGESORT\r\n\r\n//initalise steps here so they are in scope\r\nlet steps;\r\n\r\nfunction MergeSortDriver(data) {\r\n    steps = [];\r\n    mergeSort(data, 0, data.length);\r\n    let change = [];\r\n    steps.push([\r\n        [...data],\r\n        [...change]\r\n    ]);\r\n    console.log(\"got mnerge steps\")\r\n    return steps;\r\n}\r\n\r\n\r\n//first break down to subarrays\r\nfunction mergeSort(array, low, high) {\r\n    if (high - low > 1) {\r\n        //let middle = array[Math.flsoor((high + low) / 2)] //Find the pivot of the array (centre element)\r\n        let middle = low + ((high - low) >> 1); //calculate the middle of each subarray\r\n        mergeSort(array, low, middle);\r\n        mergeSort(array, middle, high);\r\n        merge(array, low, middle, high);\r\n    }\r\n}\r\n\r\n\r\n\r\n//merge function for subarrays\r\nfunction merge(data, low, middle, high) {\r\n    let tempArray = [];\r\n    let length = middle - low;\r\n    let i;\r\n    let tempMiddle;\r\n    let tempLow;\r\n    // save left subarray\r\n    for (i = 0; i < length; i++) {\r\n        tempArray[i] = data[low + i];\r\n        let change = [i]\r\n        steps.push([\r\n            [...data]\r\n        ]);\r\n    }\r\n\r\n\r\n    //begin merge of the atomic arrays\r\n    i = 0;\r\n    tempMiddle = middle;\r\n    tempLow = low;\r\n\r\n\r\n    while ((i < length) && (tempMiddle < high)) {\r\n\r\n        if (tempArray[i] <= data[tempMiddle]) {\r\n            data[tempLow++] = tempArray[i++];\r\n        } else {\r\n            data[tempLow++] = data[tempMiddle++];\r\n        }\r\n        let change = [tempLow];\r\n        steps.push([\r\n            [...data],\r\n        ]);\r\n    }\r\n    while (i < length) {\r\n        data[tempLow++] = tempArray[i++];\r\n        let change = [data[tempLow]];\r\n        steps.push([\r\n            [...data],\r\n        ]);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default MergeSortDriver\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Radixsort.js",["95","96"],"import React from \"react\";\r\n\r\nfunction Radixsort(data){\r\n\r\n\r\n    let RADIX;\r\n\r\n    // default radix is then because we usually count to base 10\r\n    if (RADIX === undefined || RADIX < 1) {\r\n        RADIX = 10\r\n    }\r\n\r\n\r\n\r\n    let steps = [];\r\n    let focus = [];\r\n\r\n    var maxLength = false\r\n    var placement = 1\r\n\r\n    while (!maxLength) {\r\n        maxLength = true\r\n        var buckets = []\r\n\r\n        for (var i = 0; i < RADIX; i++) {\r\n            buckets.push([])\r\n        }\r\n\r\n        for (var j = 0; j < data.length; j++) {\r\n            var tmp = data[j] / placement\r\n            buckets[Math.floor(tmp % RADIX)].push(data[j])\r\n\r\n            if (maxLength && tmp > 0) {\r\n                maxLength = false\r\n            }\r\n        }\r\n\r\n        var a = 0\r\n        for (var b = 0; b < RADIX; b++) {\r\n            var buck = buckets[b]\r\n            for (var k = 0; k < buck.length; k++) {\r\n                data[a] = buck[k]\r\n                a++\r\n                steps.push([...data])\r\n            }\r\n        }\r\n\r\n        placement *= RADIX\r\n        console.log(\"running\")\r\n    }\r\n    console.log(\"radix complete\")\r\n    return steps\r\n\r\n} export default Radixsort;",{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":97,"column":13,"nodeType":"103","messageId":"104","endLine":97,"endColumn":17},{"ruleId":"105","severity":1,"message":"106","line":134,"column":9,"nodeType":"107","messageId":"108","endLine":149,"endColumn":10},{"ruleId":"109","severity":1,"message":"110","line":159,"column":35,"nodeType":"111","messageId":"112","endLine":159,"endColumn":37},{"ruleId":"109","severity":1,"message":"110","line":161,"column":41,"nodeType":"111","messageId":"112","endLine":161,"endColumn":43},{"ruleId":"113","severity":1,"message":"114","line":168,"column":9,"nodeType":"115","messageId":"116","endLine":168,"endColumn":40},{"ruleId":"101","severity":1,"message":"117","line":7,"column":11,"nodeType":"103","messageId":"104","endLine":7,"endColumn":22},{"ruleId":"118","severity":1,"message":"119","line":14,"column":5,"nodeType":"103","endLine":14,"endColumn":14,"suggestions":"120"},{"ruleId":"109","severity":1,"message":"110","line":18,"column":26,"nodeType":"111","messageId":"112","endLine":18,"endColumn":28},{"ruleId":"109","severity":1,"message":"121","line":18,"column":44,"nodeType":"111","messageId":"112","endLine":18,"endColumn":46},{"ruleId":"109","severity":1,"message":"121","line":37,"column":26,"nodeType":"111","messageId":"112","endLine":37,"endColumn":28},{"ruleId":"109","severity":1,"message":"110","line":120,"column":21,"nodeType":"111","messageId":"112","endLine":120,"endColumn":23},{"ruleId":"109","severity":1,"message":"110","line":134,"column":20,"nodeType":"111","messageId":"112","endLine":134,"endColumn":22},{"ruleId":"109","severity":1,"message":"110","line":147,"column":26,"nodeType":"111","messageId":"112","endLine":147,"endColumn":28},{"ruleId":"101","severity":1,"message":"122","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":13},{"ruleId":"109","severity":1,"message":"121","line":15,"column":25,"nodeType":"111","messageId":"112","endLine":15,"endColumn":27},{"ruleId":"109","severity":1,"message":"110","line":10,"column":20,"nodeType":"111","messageId":"112","endLine":10,"endColumn":22},{"ruleId":"101","severity":1,"message":"122","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":13},{"ruleId":"101","severity":1,"message":"122","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":13},{"ruleId":"101","severity":1,"message":"122","line":2,"column":8,"nodeType":"103","messageId":"104","endLine":2,"endColumn":13},{"ruleId":"101","severity":1,"message":"123","line":43,"column":13,"nodeType":"103","messageId":"104","endLine":43,"endColumn":19},{"ruleId":"101","severity":1,"message":"123","line":63,"column":13,"nodeType":"103","messageId":"104","endLine":63,"endColumn":19},{"ruleId":"101","severity":1,"message":"123","line":70,"column":13,"nodeType":"103","messageId":"104","endLine":70,"endColumn":19},{"ruleId":"101","severity":1,"message":"122","line":1,"column":8,"nodeType":"103","messageId":"104","endLine":1,"endColumn":13},{"ruleId":"101","severity":1,"message":"124","line":16,"column":9,"nodeType":"103","messageId":"104","endLine":16,"endColumn":14},"no-native-reassign",["125"],"no-negated-in-lhs",["126"],"no-unused-vars","'temp' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'handleClick' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setIndex'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props, index, steps, complete, sort, speed] as a second argument to the useEffect Hook.",["127"],"Expected '!==' and instead saw '!='.","'React' is defined but never used.","'change' is assigned a value but never used.","'focus' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},"Add dependencies array: [props, index, steps, complete, sort, speed]",{"range":"130","text":"131"},[2870,2870],", [props, index, steps, complete, sort, speed]"]