[{"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\index.js":"1","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\reportWebVitals.js":"2","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\App.js":"3","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Controlbar.js":"4","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Algorithmbar.js":"5","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Graph.js":"6","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Bubblesort.js":"7","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Selectionsort.js":"8","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Bottombar.js":"9","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Bar\\Bar.js":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":5210,"mtime":1612476655143,"results":"14","hashOfConfig":"12"},{"size":565,"mtime":1612388993002,"results":"15","hashOfConfig":"12"},{"size":864,"mtime":1612142924574,"results":"16","hashOfConfig":"12"},{"size":7839,"mtime":1612476619552,"results":"17","hashOfConfig":"12"},{"size":690,"mtime":1612142563559,"results":"18","hashOfConfig":"12"},{"size":715,"mtime":1612277004995,"results":"19","hashOfConfig":"12"},{"size":875,"mtime":1612476648100,"results":"20","hashOfConfig":"12"},{"size":1380,"mtime":1612476467834,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1vc1v3x",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"24"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"24"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"24"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"24"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\index.js",[],["49","50"],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\reportWebVitals.js",[],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\App.js",["51","52","53","54","55"],"import './App.css';\n\nimport React from 'react';\nimport Controlbar from \"./Components/Toolbars/Controlbar\";\nimport Algorithmbar from \"./Components/Toolbars/Algorithmbar\";\nimport Graph from \"./Components/Graph/Graph\";\n\n\nimport Bubblesort from \"./Algorithms/Bubblesort\";\nimport SelectionSort from \"./Algorithms/Selectionsort\";\nimport Bottombar from \"./Components/Toolbars/Bottombar\";\n\nexport default class App extends React.Component {\n\n\n    constructor() {\n        super();\n        this.state = {\n            data: [],\n            sort: false,\n            algorithms: [],\n            speed: 75,\n            decoration: \"bars\",\n            graphID: 0, //Keeps track of latest graph ID which has been assigned\n            reset : false,\n        }\n    }\n\n    componentDidMount() {\n        this.generateData();\n    }\n\n\n\n    generateData = () =>{\n        this.setState({sort: false})\n\n        let data = [];\n        for (let i = 0; i < 20; i++){\n            data.push(Math.floor(Math.random() * 100)+1);\n        }\n\n        this.setState({data: data});\n\n        if (this.state.algorithms.length > 0){\n            this.setState({reset: true})\n            this.state.algorithms.forEach(i=>{\n                i.steps = this.getSteps(i.algorithm, this.state.data)\n            })\n            this.setState({reset: false})\n        }\n\n    }\n\n    startSort = (msg) =>{\n        this.setState({sort: true})\n    }\n\n\n    /*\n    addAlgorithm = (algorithm) =>{\n        let temp = this.state.algorithms;\n        let alreadyContains = false;\n        let containedSteps = [];\n\n        for (let i = 0; i < temp.length; i++){\n            if (temp[i].algorithm === algorithm){\n                if (temp[i].dataVer === this.state.dataVer) {\n                    alreadyContains = true;\n                    containedSteps = temp[i].steps;\n                }\n            }\n        }\n\n        if (!alreadyContains) {\n            temp.push({algorithm: algorithm, dataVer: this.state.dataVer, steps: this.getSteps(algorithm, [...this.state.data])}) //[  [  [alg1 title], [alg1, step1], [alg1,step2]   ,   [alg2 title], [alg2, step1], [alg2,step2]  ] ....\n            this.setState({algorithms: temp});\n        } else {\n            temp.push({algorithm: algorithm, dataVer: this.state.dataVer, steps: containedSteps}) //[  [  [alg1 title], [alg1, step1], [alg1,step2]   ,   [alg2 title], [alg2, step1], [alg2,step2]  ] ....\n            this.setState({algorithms: temp});\n            //alert(\"You have already selected this algorithm\")\n        }\n    }\n*/\n\n    clear = () => {\n        this.setState({algorithms: []})\n    }\n    addAlgorithm = (algorithm) =>{\n        let temp = this.state.algorithms;\n        temp.push({algorithm: algorithm, steps: this.getSteps(algorithm, [...this.state.data]), graphID: this.state.graphID+1})\n        this.setState({\n            algorithms: temp,\n            graphID: this.state.graphID+1\n\n        });\n    }\n\n\n    removeAlgorithm = (graphID) =>{\n        console.log(\"remove algorithm\")\n        let temp = [];\n        for (let i = 0; i < this.state.algorithms.length; i++){\n            console.log(\"here poo graphID: \" + graphID)\n            if (this.state.algorithms[i].graphID !== graphID) {\n                temp.push(this.state.algorithms[i]);\n            }\n        }\n        this.setState({algorithms: temp});\n    }\n\n\n\n    getSteps = (algorithm, data) =>{\n        console.log(\"alg: \" + algorithm)\n        switch (algorithm) {\n            case \"Bubble Sort\":\n                return Bubblesort(data);\n            case \"Selection Sort\":\n                return SelectionSort(data);\n        }\n    }\n\n    stopSort = () =>{\n        this.state.sort = false;\n    }\n\n    updateSpeed = (newSpeed) =>{\n        this.setState({speed: newSpeed});\n    }\n\n    changeDecoration = () =>{\n        if (this.state.decoration == \"bars\"){\n            this.setState({decoration: \"numerics\"})\n        }else if (this.state.decoration == \"numerics\"){\n            this.setState({decoration: \"bars\"})\n        }\n    }\n\n    drawGraphs = () =>{\n\n        {this.setState({reset: false})}\n    }\n\n    render() {\n\n        return(\n            <div>\n                <Controlbar generateDataCallback = {this.generateData} startSortCallback = {this.startSort} clearCallback = {this.clear}/>\n\n\n\n\n                <Algorithmbar onAddAlgorithm={this.addAlgorithm}/>\n\n                {/*<h1>Data: {this.state.data}</h1>*/}\n\n\n                {/*<h2>Graph:</h2>*/}\n\n                {(this.state.algorithms.map(i => (\n                    <div>\n                        <h2>{i.algorithm}</h2>\n                        <h3>{\"reset: \" + this.state.reset}</h3>\n                        <Graph steps = {[i][0].steps} sort = {this.state.sort} stopSort = {this.stopSort} removeAlgorithm = {this.removeAlgorithm} title = {i.algorithm} speed = {this.state.speed} decoration ={this.state.decoration} graphID = {i.graphID} reset={this.state.reset}/>\n                        {/*/*index 0 being the starting step (unsorted array) so then when animating should be: [i][0][j]*/}\n                    </div>\n                )))}\n\n\n                <Bottombar updateSpeedCallback = {this.updateSpeed} toggleDecoration = {this.changeDecoration}/>\n            </div>\n        );\n\n    }\n}\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Controlbar.js",["56"],"import React from 'react';\r\nimport './UI Bars.css';\r\n\r\n\r\nexport default function Controlbar(props) {\r\n\r\n    const handleClick = e => props.generateData(true);\r\n\r\n    return (\r\n        <div>\r\n            <nav className=\"Toolbar\">\r\n                <button value=\"generateData\" onClick={props.generateDataCallback}>Generate New Data</button>\r\n                <button onClick={props.clearCallback}>Clear</button>\r\n                <button id={\"start\"} value=\"startSort\" onClick={props.startSortCallback}>Sort</button>\r\n            </nav>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Algorithmbar.js",[],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Graph.js",["57","58","59","60","61","62","63"],"import React from 'react';\r\nimport {useState, useEffect} from 'react';\r\nimport './Graph.css'\r\nimport Bar from \"./Bar/Bar\";\r\n\r\n\r\nfunction Graph(props) {\r\n    let steps = props.steps;\r\n    let complete = false;\r\n    const [index, setIndex] = useState(0);\r\n    let speed = props.speed;\r\n\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        if (props.reset == true){\r\n            setIndex(0);\r\n\r\n        }\r\n        if (props.sort == true){\r\n            const interval = setInterval(() => {\r\n                if (!(complete)) {\r\n                    if (steps.length > index + 1) {\r\n                        setIndex(index + 1)\r\n                    } else {\r\n                        props.stopSort()\r\n                        complete = false;\r\n                    }\r\n                }\r\n            }, speed);\r\n            return () => clearInterval(interval); //deletes\r\n        }\r\n\r\n    });\r\n\r\n    return (\r\n        <div>\r\n            {speed}\r\n            {drawBars(steps[index], props, props.title, props.decoration, complete)}\r\n        </div>\r\n    )\r\n}export default Graph\r\n\r\nlet animate = (index, setIndex, steps, props) =>{\r\n    console.log(\"calling animate steps len: \" + steps.length)\r\n    for (let i = 0; i < steps.length; i++){\r\n\r\n        setTimeout(function() {\r\n            setIndex(index ++);\r\n        }, 100*i);\r\n\r\n        //setIndex(index++);\r\n        console.log(\"index: \" + index)\r\n        //setTimeout(()=>(setIndex(index +1)), 10*i);\r\n    }\r\n    props.stopSort(); //Stops sort from being invoked again\r\n}\r\n\r\n\r\n/*\r\n\r\n/*\r\nconst animiate = (steps, displayData, setDisplayData)=>{\r\n\r\n    let sorted = false;\r\n    do{\r\n        for (let i = 0; i < steps.length; i++){\r\n            setDisplayData(steps[i])\r\n            /*\r\n            setTimeout(function() {\r\n                console.log(\"i: \" + i)\r\n                setDisplayData(steps[i])\r\n            }, 1*i);\r\n        }\r\n        sorted = true;\r\n    }while (!sorted)\r\n\r\n}*/\r\n/*\r\n    console.log(\"oog boo \" + props.sort)\r\n\r\n    if (props.sort == true){\r\n        for (let i = 0; i < steps.length; i++){\r\n\r\n            console.log(\"ooga booga\")\r\n            setTimeout(()=>(setDisplayData(steps[i]), (10*i)))\r\n\r\n        }\r\n    }else{\r\n        setDisplayData(steps[0])\r\n    }\r\n\r\n    console.log()\r\n    return(\r\n        <div>\r\n            {drawBars(displayData, props)}\r\n        </div>\r\n    )\r\n*/\r\n    /*\r\n    useEffect(() => {\r\n        if (props.sort == true){\r\n\r\n\r\n            const element = document.getElementById('bars');\r\n            let start;\r\n\r\n            function step(timestamp) {\r\n                if (start === undefined)\r\n                    start = timestamp;\r\n                const elapsed = timestamp - start;\r\n\r\n                // `Math.min()` is used here to make sure that the element stops at exactly 200px.\r\n                element.style.transform = 'translateX(' + Math.min(0.1 * elapsed, 200) + 'px)';\r\n\r\n                if (elapsed < 2000) { // Stop the animation after 2 seconds\r\n                    window.requestAnimationFrame(step);\r\n                }\r\n            }\r\n\r\n            for (let i = 0; i < steps.length-1; i++){\r\n                setTimeout(function() {\r\n                    setIndex(index+1)\r\n                }, 10*i);\r\n\r\n            }\r\n        }\r\n    });*/\r\n\r\n/*\r\n    return(\r\n        <div>\r\n            <h1>{\"sort: \" + props.sort}</h1>\r\n            <button className={\"close-button\"} onClick={()=>handleClick}>x</button>\r\n            <div className={\"bars\"} style={{\r\n                height: `${getBarHeight(Math.max(steps[index]))}`}}>\r\n                {\r\n                    steps[index].map(i => (\r\n                        <svg width=\"1\" height={getBarHeight(i)} className={\"arraybar\"}>\r\n                            <rect width=\"400\" height={getBarHeight(i)} style={{\r\n                                height: `${getBarHeight(i)}em`, fill: `${getColour(key++)}`\r\n                            }} />\r\n                        </svg>)\r\n\r\n                    )}\r\n            </div>\r\n        </div>)\r\n    /*\r\n    return(\r\n        <div>\r\n            {drawBars(displayData, props)}\r\n        </div>\r\n    );\r\n*/\r\n\r\n    /*\r\n    if (props.sort == false){\r\n        return(\r\n            <div>\r\n                <h1>{\"sort: \" + props.sort}</h1>\r\n                <button className={\"close-button\"} onClick={()=>handleClick}>x</button>\r\n                <div className={\"bars\"} style={{\r\n                    height: `${getBarHeight(Math.max(steps[index]))}`}}>\r\n                    {\r\n                        steps[index].map(i => (\r\n                            <svg width=\"1\" height={getBarHeight(i)} className={\"arraybar\"}>\r\n                                <rect width=\"400\" height={getBarHeight(i)} style={{\r\n                                    height: `${getBarHeight(i)}em`, fill: `${getColour(key++)}`\r\n                                }} />\r\n                            </svg>)\r\n\r\n                        )}\r\n                </div>\r\n            </div>)\r\n    }else{\r\n\r\n        return (animate(props, steps, setSteps, index, setIndex) )\r\n\r\n    }\r\n*/\r\n\r\n/*\r\nfunction drawBars(data, props, algorithm){\r\n\r\n    let handleRemove = (e) => {\r\n        console.log(\"remov thing\")\r\n        props.removeAlgorithm(e.target.value);\r\n    }\r\n\r\n\r\n    let key = -1;\r\n\r\n    console.log(\"reutrn + \" + data)\r\n    return(\r\n        <div id = {\"sort\"}>\r\n            <h1>{\"sort: \" + props.sort}</h1>\r\n            <button className={\"close-button\"} value={algorithm} onClick={()=>props.removeAlgorithm(props.title)}>x</button>\r\n            <div className={\"bars\"} style={{\r\n                height: `${getBarHeight(Math.max(data))}`}}>\r\n                {\r\n                    data.map(i => (\r\n\r\n\r\n                        <svg width=\"1\" height={getBarHeight(i)} className={\"arraybar\"}>\r\n                            <rect width=\"400\" height={getBarHeight(i)} style={{\r\n                                height: `${getBarHeight(i)}em`, fill: `${getColour(key++)}`\r\n                            }} />\r\n                        </svg>)\r\n\r\n                    )}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n*/\r\n\r\nfunction drawBars(data, props, algorithm, decoration, complete){\r\n\r\n\r\n\r\n    let key = -1;\r\n\r\n\r\n    if (decoration == \"bars\"){\r\n        return(\r\n            <div id = {\"sort\"}>\r\n                <h1>{\"sort: \" + props.sort}</h1>\r\n                <button className={\"close-button\"} value={algorithm} onClick={()=>props.removeAlgorithm(props.graphID)}>x</button>\r\n                <div className={\"bars\"} style={{\r\n                    height: `${(Math.max(data))}`}}>{\r\n                    data.map(i => (\r\n                        <Bar value = {i} decoration = {decoration} key = {key} complete = {complete}/>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }else if (decoration == \"numerics\"){\r\n        return(\r\n            <div id = {\"sort\"}>\r\n                <h1>{\"sort: \" + props.sort}</h1>\r\n                <button className={\"close-button\"} value={algorithm} onClick={()=>props.removeAlgorithm(props.graphID)}>x</button>\r\n                <div className={\"numerics\"} style={{\r\n                    height: `${(Math.max(data))}`}}>{\r\n                    data.map(i => (\r\n                        <Bar value = {i} decoration = {decoration} key = {key}/>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\n\r\n/*\r\n\r\n//Returns blue if the data at hand is a focus/\r\nfunction getColour(index, focus){\r\n    if(Array.isArray(focus)){\r\n        for (let i =0; i < focus.length; i++){\r\n            console.log(\"focus: \" + focus[i] + \" \" + index)\r\n            if (focus[i] === index){\r\n                return \"blue\"\r\n            }\r\n        }\r\n    }\r\n\r\n    return \"orange\";\r\n}\r\n\r\n//Calculates appropriate bar height depending on how many algorithms are being compared.\r\nfunction getBarHeight(i) {\r\n    return i;\r\n}\r\n\r\n */\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Bubblesort.js",["64"],"import React from 'react';\r\n\r\n\r\nfunction Bubblesort(data) {\r\n    let steps = [];\r\n    steps.push([...data]);\r\n    let swapped;\r\n    do {\r\n        swapped = false;\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (data[i] > data[i + 1]) {\r\n                let temp = data[i];\r\n                data[i] = data[i + 1];\r\n                data[i + 1] = temp;\r\n                swapped = true;\r\n\r\n\r\n                //steps.push([...data]);\r\n\r\n\r\n                //steps.push([...data])\r\n\r\n            }\r\n            steps.push(\r\n                [...data]\r\n            );\r\n        }\r\n    } while (swapped);\r\n\r\n    steps.push([...data]);\r\n    return steps;\r\n}export default Bubblesort\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Selectionsort.js",["65"],"function SelectionSort(data){\r\n    let steps = [];\r\n    steps.push([...data]);\r\n    let length = data.length;\r\n\r\n    for(let i = 0; i < length; i++) {\r\n\r\n        let smallestInt = i;\r\n        for(let j = i+1; j < length; j++){\r\n            if(data[j] < data[smallestInt]) { //if the index on the right array is smaller the current record then overwrite this\r\n                smallestInt=j;\r\n            }\r\n        }\r\n\r\n        if (smallestInt != i) {\r\n            let temp = data[i];\r\n            data[i] = data[smallestInt];\r\n            data[smallestInt] = temp;\r\n\r\n        }steps.push(\r\n            [...data]);\r\n    }\r\n    steps.push(\r\n        [...data]\r\n    );\r\n    return steps;\r\n}export default SelectionSort;","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Bottombar.js",[],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Bar\\Bar.js",["66"],"function Bar(props) {\r\n    let key = props.key;\r\n    let i = props.value;\r\n    let decoration = props.decoration;\r\n\r\n    console.log(\"decoratiom: \" + decoration)\r\n\r\n    if (decoration == \"bars\"){\r\n        return(\r\n            <svg width=\"1\" height={getBarHeight(i)} className={\"arraybar\"}>\r\n                <rect width=\"400\" height={getBarHeight(i)} style={{\r\n                    height: `${getBarHeight(i)}em`, fill: `${getColour(key++, [], props.complete)}` //[] = the focus variable\r\n                }} />\r\n            </svg>)\r\n    }else{\r\n        return (\r\n            <div >\r\n                <h1>{\" \" + i + \", \"}</h1>\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n}export default Bar\r\n\r\n\r\n//Returns blue if the data at hand is a focus/\r\nfunction getColour(index, focus, complete){\r\n    console.log(\"get colour complete var: \" + complete)\r\n    if (complete){\r\n        console.log(\"complete\")\r\n        return \"green\"\r\n    }else{\r\n        if(Array.isArray(focus)){\r\n            for (let i =0; i < focus.length; i++){\r\n                console.log(\"focus: \" + focus[i] + \" \" + index)\r\n                if (focus[i] === index){\r\n                    return \"blue\"\r\n                }\r\n            }\r\n        }\r\n        return \"orange\";\r\n    }\r\n\r\n}\r\n\r\n//Calculates appropriate bar height depending on how many algorithms are being compared.\r\nfunction getBarHeight(i) {\r\n    return i;\r\n}\r\n",{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","severity":1,"message":"72","line":116,"column":9,"nodeType":"73","messageId":"74","endLine":121,"endColumn":10},{"ruleId":"75","severity":1,"message":"76","line":125,"column":9,"nodeType":"77","endLine":125,"endColumn":19},{"ruleId":"78","severity":1,"message":"79","line":133,"column":35,"nodeType":"80","messageId":"81","endLine":133,"endColumn":37},{"ruleId":"78","severity":1,"message":"79","line":135,"column":41,"nodeType":"80","messageId":"81","endLine":135,"endColumn":43},{"ruleId":"82","severity":1,"message":"83","line":142,"column":9,"nodeType":"84","messageId":"85","endLine":142,"endColumn":40},{"ruleId":"86","severity":1,"message":"87","line":7,"column":11,"nodeType":"88","messageId":"89","endLine":7,"endColumn":22},{"ruleId":"78","severity":1,"message":"79","line":17,"column":25,"nodeType":"80","messageId":"81","endLine":17,"endColumn":27},{"ruleId":"78","severity":1,"message":"79","line":21,"column":24,"nodeType":"80","messageId":"81","endLine":21,"endColumn":26},{"ruleId":"90","severity":1,"message":"91","line":28,"column":36,"nodeType":"92","endLine":28,"endColumn":41},{"ruleId":"86","severity":1,"message":"93","line":45,"column":5,"nodeType":"88","messageId":"89","endLine":45,"endColumn":12},{"ruleId":"94","severity":1,"message":"95","line":49,"column":20,"nodeType":"96","messageId":"97","endLine":51,"endColumn":10},{"ruleId":"78","severity":1,"message":"79","line":226,"column":20,"nodeType":"80","messageId":"81","endLine":226,"endColumn":22},{"ruleId":"78","severity":1,"message":"79","line":239,"column":26,"nodeType":"80","messageId":"81","endLine":239,"endColumn":28},{"ruleId":"86","severity":1,"message":"98","line":1,"column":8,"nodeType":"88","messageId":"89","endLine":1,"endColumn":13},{"ruleId":"78","severity":1,"message":"99","line":15,"column":25,"nodeType":"80","messageId":"81","endLine":15,"endColumn":27},{"ruleId":"78","severity":1,"message":"79","line":8,"column":20,"nodeType":"80","messageId":"81","endLine":8,"endColumn":22},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-unused-vars","'handleClick' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","Assignments to the 'complete' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","Literal","'animate' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'index'.","FunctionExpression","unsafeRefs","'React' is defined but never used.","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]