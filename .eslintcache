[{"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\index.js":"1","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\reportWebVitals.js":"2","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\App.js":"3","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Controlbar.js":"4","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Algorithmbar.js":"5","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Graph.js":"6","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Bubblesort.js":"7","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Selectionsort.js":"8","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Bottombar.js":"9","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Bar\\Bar.js":"10","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Heapsort.js":"11","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Quicksort.js":"12","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Insertionsort.js":"13","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Mergesort.js":"14","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Radixsort.js":"15"},{"size":500,"mtime":499162500000,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"17"},{"size":6698,"mtime":1613041131642,"results":"19","hashOfConfig":"17"},{"size":565,"mtime":1612388993002,"results":"20","hashOfConfig":"17"},{"size":864,"mtime":1612142924574,"results":"21","hashOfConfig":"17"},{"size":5722,"mtime":1613047549950,"results":"22","hashOfConfig":"17"},{"size":924,"mtime":1613041408648,"results":"23","hashOfConfig":"17"},{"size":760,"mtime":1612868347518,"results":"24","hashOfConfig":"17"},{"size":1793,"mtime":1612953756757,"results":"25","hashOfConfig":"17"},{"size":1779,"mtime":1613054707872,"results":"26","hashOfConfig":"17"},{"size":1395,"mtime":1612868347541,"results":"27","hashOfConfig":"17"},{"size":2026,"mtime":1613054142387,"results":"28","hashOfConfig":"17"},{"size":1518,"mtime":1612868347526,"results":"29","hashOfConfig":"17"},{"size":1840,"mtime":1612868347472,"results":"30","hashOfConfig":"17"},{"size":1216,"mtime":1612951309189,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1vc1v3x",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"34"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"34"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"34"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"34"},"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\index.js",[],["72","73"],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\reportWebVitals.js",[],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\App.js",["74","75","76","77","78","79","80"],"import './App.css';\n\nimport React from 'react';\nimport Controlbar from \"./Components/Toolbars/Controlbar\";\nimport Algorithmbar from \"./Components/Toolbars/Algorithmbar\";\nimport Graph from \"./Components/Graph/Graph\";\n\n\nimport Bubblesort from \"./Algorithms/Bubblesort\";\nimport SelectionSort from \"./Algorithms/Selectionsort\";\nimport Heapsort from \"./Algorithms/Heapsort\"\nimport Insertionsort from \"./Algorithms/Insertionsort\";\nimport MergeSortDriver from \"./Algorithms/Mergesort\";\nimport Quicksort from \"./Algorithms/Quicksort\";\nimport Radixsort from \"./Algorithms/Radixsort\";\n\n\nimport Bottombar from \"./Components/Toolbars/Bottombar\";\n\nexport default class App extends React.Component {\n\n\n    constructor() {\n        super();\n        this.state = {\n            data: [],\n            sort: false,\n            algorithms: [],\n            speed: 75,\n            decoration: \"bars\",\n            graphID: 0, //Keeps track of latest graph ID which has been assigned\n            reset : false,\n            stopCounter: 0, //Keeps track of when an algorithm has finished (used in stopSort())\n            resetCounter: 0,\n            pause: false,\n        }\n    }\n\n    componentDidMount() {\n        this.generateData();\n    }\n\n\n\n    generateData = () =>{\n        this.setState({sort: false})\n\n        if (this.state.algorithms.length > 0){\n            this.setState({reset: true})\n        }\n\n        let data = [];\n        for (let i = 0; i < 20; i++){\n            data.push(Math.floor(Math.random() * 100)+1);\n        }\n\n        this.setState({data: data});\n\n        this.state.algorithms.forEach(i=>{\n            //i.steps = this.getSteps(i.algorithm, this.state.data)\n           // temp.push({algorithm: algorithm, steps: this.getSteps(algorithm, [...this.state.data]), graphID: this.state.graphID+1})\n\n            let [...steps] = this.getSteps(i.algorithm, data);\n            console.log(\"NEW STEPS: \" + steps + \" with len: \" + steps.length);\n            i.steps = steps;\n            //TODO for temp fix, change above line to: i.steps = this.getSteps(i.algorithm, data) but does not work properly\n        })\n\n\n        /*\n        console.log(\"data: \" + data)\n\n\n        if (this.state.algorithms.length > 0){\n            this.reset();\n        }\n*/\n    }\n\n    resetCompleted = () =>{\n        let tempResetCounter = this.state.resetCounter + 1;\n        this.setState({resetCounter: tempResetCounter})\n        console.log(\"reset complete func: \" + tempResetCounter)\n\n        if (this.state.resetCounter >= this.state.algorithms.length){\n            this.setState({reset: false})\n        }\n    }\n\n    startSort = () =>{\n        this.setState({sort: true})\n    }\n\n    stopSort = () =>{\n\n        console.log(\"stopping sort\")\n\n        let temp = this.state.stopCounter + 1;\n        console.log(\"lenght: \" + this.state.algorithms.length)\n        this.setState({sort: false})\n\n    }\n\n\n    clear = () => {\n        this.setState({algorithms: []})\n    }\n    addAlgorithm = (algorithm) =>{\n        let temp = this.state.algorithms;\n        temp.push({algorithm: algorithm, steps: this.getSteps(algorithm, [...this.state.data]), graphID: this.state.graphID+1})\n        this.setState({\n            algorithms: temp,\n            graphID: this.state.graphID+1\n\n        });\n    }\n\n\n    removeAlgorithm = (graphID) =>{\n        console.log(\"remove algorithm\")\n        let temp = [];\n        for (let i = 0; i < this.state.algorithms.length; i++){\n            console.log(\"here graphID: \" + graphID)\n            if (this.state.algorithms[i].graphID !== graphID) {\n                temp.push(this.state.algorithms[i]);\n            }\n        }\n        this.setState({algorithms: temp});\n    }\n\n\n\n    getSteps = (algorithm, data) =>{\n        console.log(\"getsteps data: \" + data);\n        switch (algorithm) {\n            case \"Bubble Sort\":\n                return Bubblesort(data);\n            case \"Heap Sort\":\n                return Heapsort(data);\n            case \"Insertion Sort\":\n                console.log(\"steps to return: \" + Insertionsort(data))\n                let steps = Insertionsort(data)\n                return steps;\n            case \"Quick Sort\":\n                return Quicksort(data);\n            case \"Radix Sort\":\n                return Radixsort(data);\n            case \"Merge Sort\":\n                return MergeSortDriver(data);\n            case \"Selection Sort\":\n                return SelectionSort(data);\n        }\n    }\n\n\n\n    updateSpeed = (newSpeed) =>{\n        this.setState({speed: newSpeed});\n    }\n\n    changeDecoration = () =>{\n        if (this.state.decoration == \"bars\"){\n            this.setState({decoration: \"numerics\"})\n        }else if (this.state.decoration == \"numerics\"){\n            this.setState({decoration: \"bars\"})\n        }\n    }\n\n    drawGraphs = () =>{\n\n        {this.setState({reset: false})}\n    }\n\n    skip = (direction) =>{\n\n    }\n\n    togglePlayPause = () =>{\n        if (this.state.pause == true){\n            this.setState({pause: false})\n        }else{\n            if (this.state.sort == false){\n                this.setState({sort: true})\n            }\n            this.setState({pause: true})\n        }\n    }\n\n    render() {\n\n        return(\n            <div>\n                <Controlbar generateDataCallback = {this.generateData} startSortCallback = {this.startSort} clearCallback = {this.clear}/>\n\n\n                <Algorithmbar onAddAlgorithm={this.addAlgorithm}/>\n\n                {/*<h1>Data: {this.state.data}</h1>*/}\n\n\n                {/*<h2>Graph:</h2>*/}\n                <h3>{\"reset state of app: \" + this.state.reset}</h3>\n                <h3>{\"sort state of app scope: \" + this.state.sort}</h3>\n                <div id={\"sorting-area\"}>\n                    {(this.state.algorithms.map(i => (\n\n                        <div id ={i.graphID}>\n                            <h1>{\"sort state: \" + this.state.sort}</h1>\n                            <h2>{i.algorithm}</h2>\n                            <Graph steps = {[i][0].steps} sort = {this.state.sort} stopSort = {this.stopSort} removeAlgorithm = {this.removeAlgorithm} title = {i.algorithm} speed = {this.state.speed} decoration ={this.state.decoration} graphID = {i.graphID} reset={this.state.reset} resetCompletedCallback = {this.resetCompleted} pause = {this.state.pause}/>\n                            {/*/*index 0 being the starting step (unsorted array) so then when animating should be: [i][0][j]*/}\n                        </div>\n                    )))}\n                </div>\n\n\n\n                <Bottombar updateSpeedCallback = {this.updateSpeed} toggleDecoration = {this.changeDecoration} playPauseCallback = {this.togglePlayPause} skip = {() => this.skip()}/>\n            </div>\n        );\n\n    }\n}\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Controlbar.js",["81"],"import React from 'react';\r\nimport './UI Bars.css';\r\n\r\n\r\nexport default function Controlbar(props) {\r\n\r\n    const handleClick = e => props.generateData(true);\r\n\r\n    return (\r\n        <div>\r\n            <nav className=\"Toolbar\">\r\n                <button value=\"generateData\" onClick={props.generateDataCallback}>Generate New Data</button>\r\n                <button onClick={props.clearCallback}>Clear</button>\r\n                <button id={\"start\"} value=\"startSort\" onClick={props.startSortCallback}>Sort</button>\r\n            </nav>\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Algorithmbar.js",[],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Graph.js",["82","83","84","85","86","87","88","89","90"],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Bubblesort.js",["91"],"import React from 'react';\r\n\r\n\r\nfunction Bubblesort(originalData) {\r\n    let data = [...originalData];\r\n    let steps = [];\r\n    let focus = [];\r\n    console.log(\"data in bubble: \" + data)\r\n    steps.push([...data]);\r\n    let swapped;\r\n    do {\r\n        swapped = false;\r\n        for (let i = 0; i < data.length; i++) {\r\n            let focus = [i, i+1];\r\n            if (data[i] > data[i + 1]) {\r\n                let temp = data[i];\r\n                data[i] = data[i + 1];\r\n                data[i + 1] = temp;\r\n                swapped = true;\r\n\r\n\r\n\r\n\r\n                //steps.push([...data])\r\n\r\n            }\r\n            steps.push([\r\n                [...data],\r\n                [...focus]\r\n            ]);\r\n        }\r\n    } while (swapped);\r\n\r\n    focus = [];\r\n    steps.push([\r\n        [...data],\r\n        [...focus]\r\n    ]);\r\n    console.log(\"BUBBLE STEPS: \" + steps[0])\r\n    return steps;\r\n}export default Bubblesort\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Selectionsort.js",["92"],"function SelectionSort(originalData){\r\n    let data = [...originalData];\r\n    let steps = [];\r\n    steps.push([...data]);\r\n    let length = data.length;\r\n\r\n    for(let i = 0; i < length; i++) {\r\n\r\n        let smallestInt = i;\r\n        for(let j = i+1; j < length; j++){\r\n            if(data[j] < data[smallestInt]) { //if the index on the right array is smaller the current record then overwrite this\r\n                smallestInt=j;\r\n            }\r\n        }\r\n\r\n        if (smallestInt != i) {\r\n            let temp = data[i];\r\n            data[i] = data[smallestInt];\r\n            data[smallestInt] = temp;\r\n\r\n        }steps.push(\r\n            [...data]);\r\n    }\r\n    steps.push(\r\n        [...data]\r\n    );\r\n    return steps;\r\n}export default SelectionSort;\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Toolbars\\Bottombar.js",["93","94"],"import React from 'react';\r\nimport './UI Bars.css'\r\n\r\nimport {useState} from 'react';\r\n\r\n//Control bar for animation speed/type etc.\r\nfunction Bottombar(props){\r\n\r\n    /*\r\n    <input type=\"range\" min=\"1\" max=\"100\" className=\"slider\" id={'speedController'} onInput={sliderController}/>\r\n    */\r\n\r\n    const [playPauseIcon, setPlayPauseIcon] = useState('pause');\r\n\r\n    const playPause = () =>{\r\n        if (playPauseIcon == \"pause\"){\r\n            setPlayPauseIcon(\"play_arrow\")\r\n        }else if (playPauseIcon == \"play_arrow\"){\r\n            setPlayPauseIcon(\"pause\")\r\n        }\r\n        props.playPauseCallback();\r\n    }\r\n\r\n\r\n\r\n    const skip = (e) =>{\r\n        props.skip(e.target.value)\r\n    }\r\n    const updateSpeed = (e) =>{\r\n        props.updateSpeedCallback(e.target.value);\r\n    }\r\n\r\n    const toggleDecoration = () =>{\r\n        props.toggleDecoration();\r\n    }\r\n    return(\r\n\r\n        <div id = {'bottombar'}>\r\n\r\n            <div id={'speed-controller'}>\r\n                <h3 id={'speedLabel'}>Speed:</h3>\r\n                <button onClick={updateSpeed} value={500}>Slow</button>\r\n                <button onClick={updateSpeed} value={75}>Medium</button>\r\n                <button onClick={updateSpeed} value={20}>Fast</button>\r\n                <button onClick={toggleDecoration}>Change decoration</button>\r\n            </div>\r\n            <div id={'play-controller'}>\r\n                <button onClick = {skip} value={\"backwards\"}><i className=\"material-icons\">skip_previous</i></button>\r\n                <button onClick = {playPause}><i className=\"material-icons\">{playPauseIcon}</i></button>\r\n                <button onClick={skip} value={\"forwards\"}><i className=\"material-icons\">skip_next</i></button>\r\n            </div>\r\n\r\n\r\n        </div>\r\n    )\r\n\r\n\r\n}export default Bottombar;\r\n\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Components\\Graph\\Bar\\Bar.js",["95"],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Heapsort.js",["96"],"import React from \"react\";\r\n\r\nlet arrayLength = 0;\r\nlet steps;\r\n\r\nfunction heapRoot (input, i) {\r\n    const left = 2 * i + 1\r\n    const right = 2 * i + 2\r\n    let max = i\r\n\r\n    if (left < arrayLength && input[left] > input[max]) {\r\n        max = left\r\n    }\r\n\r\n    if (right < arrayLength && input[right] > input[max]) {\r\n        max = right\r\n    }\r\n\r\n    if (max !== i) {\r\n        swap(input, i, max)\r\n        heapRoot(input, max)\r\n    }\r\n}\r\n\r\nfunction swap (input, indexA, indexB) {\r\n    [input[indexA], input[indexB]] = [input[indexB], input[indexA]]\r\n    let focus = [indexA, indexB];\r\n    steps.push([\r\n        [...input],\r\n        [...focus]\r\n    ]);\r\n\r\n}\r\n\r\nfunction heapSort (input) {\r\n\r\n    steps = [];\r\n    arrayLength = input.length\r\n\r\n\r\n    for (let i = Math.floor(arrayLength / 2); i >= 0; i -= 1) {\r\n        heapRoot(input, i)\r\n    }\r\n\r\n    for (let i = input.length - 1; i > 0; i--) {\r\n        swap(input, 0, i)\r\n        arrayLength--\r\n\r\n        heapRoot(input, 0)\r\n    }\r\n\r\n    let focus = [];\r\n    steps.push([\r\n        [...input],\r\n        [...focus]\r\n    ]);\r\n\r\n    return steps;\r\n}\r\n\r\n\r\n/*\r\nfunction heapSort(data){\r\n    let steps = [];\r\n\r\n    function swap(data, A, B){\r\n        let temp1 = data[A]\r\n        let temp2 = data[B]\r\n    }\r\n\r\n    function heapRoot(data, index){}\r\n    return steps;\r\n}\r\n*/\r\n\r\nexport default heapSort;","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Quicksort.js",["97"],"C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Insertionsort.js",["98"],"\r\nimport React from \"react\";\r\n\r\n\r\n\r\nfunction Insertionsort(originalData){\r\n\r\n\r\n    //Creates own copy of data, rather than maniuplating the original data\r\n    let data = [...originalData];\r\n    let steps = stepsGenerator(data);\r\n\r\n    return steps;\r\n\r\n}export default Insertionsort;\r\n\r\n\r\n//Goes through the array, generating the instance of the array at each step and returns an array containing these instances in chronological order.\r\n//i = first iterator\r\n//j = second iterator where to insert\r\nfunction stepsGenerator(data){\r\n    let steps = [];\r\n    for (let i = 1; i < data.length; i++) {\r\n        let change = [];\r\n        let current = data[i]; //split between sorted/unsorted list\r\n        let j = (i-1);\r\n        let temp = data;\r\n        while ((j > -1) && (current < data[j])) {\r\n            temp[j + 1] = temp[j]; //insert element\r\n            j--;\r\n        }\r\n        temp[j + 1] = current;\r\n\r\n        data = temp;\r\n        change = [j+1];\r\n            steps.push([\r\n            [...data],\r\n            [...change]\r\n        ]);\r\n    }\r\n    let change = [];\r\n    steps.push([\r\n        [...data],\r\n        [...change]\r\n    ]);\r\n    return steps;\r\n}\r\n\r\n\r\n/*\r\nfunction Insertionsort(data){\r\n    let steps = [];\r\n    let original = data;\r\n    for (let i = 0; i < data.length; i++){\r\n        let temp = data[i];\r\n        for (let j = (i -1; j >= 0 && (data[j]) > temp; j--)){\r\n            data[j+1] = data[j];\r\n        }\r\n    }\r\n    data [j+1]\r\n\r\n}*/\r\n\r\n//https://www.geeksforgeeks.org/binary-insertion-sort/\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Mergesort.js",["99","100","101"],"\r\n//TEMP CODE FOR MERGESORT\r\n\r\n//initalise steps here so they are in scope\r\nlet steps;\r\n\r\nfunction MergeSortDriver(data) {\r\n    steps = [];\r\n    mergeSort(data, 0, data.length);\r\n    let change = [];\r\n    steps.push([\r\n        [...data],\r\n        [...change]\r\n    ]);\r\n    console.log(\"got mnerge steps\")\r\n    return steps;\r\n}\r\n\r\n\r\n//first break down to subarrays\r\nfunction mergeSort(array, low, high) {\r\n    if (high - low > 1) {\r\n        //let middle = array[Math.flsoor((high + low) / 2)] //Find the pivot of the array (centre element)\r\n        let middle = low + ((high - low) >> 1); //calculate the middle of each subarray\r\n        mergeSort(array, low, middle);\r\n        mergeSort(array, middle, high);\r\n        merge(array, low, middle, high);\r\n    }\r\n}\r\n\r\n\r\n\r\n//merge function for subarrays\r\nfunction merge(data, low, middle, high) {\r\n    let tempArray = [];\r\n    let length = middle - low;\r\n    let i;\r\n    let tempMiddle;\r\n    let tempLow;\r\n    // save left subarray\r\n    for (i = 0; i < length; i++) {\r\n        tempArray[i] = data[low + i];\r\n        let change = [i]\r\n        steps.push([\r\n            [...data]\r\n        ]);\r\n    }\r\n\r\n\r\n    //begin merge of the atomic arrays\r\n    i = 0;\r\n    tempMiddle = middle;\r\n    tempLow = low;\r\n\r\n\r\n    while ((i < length) && (tempMiddle < high)) {\r\n\r\n        if (tempArray[i] <= data[tempMiddle]) {\r\n            data[tempLow++] = tempArray[i++];\r\n        } else {\r\n            data[tempLow++] = data[tempMiddle++];\r\n        }\r\n        let change = [tempLow];\r\n        steps.push([\r\n            [...data],\r\n        ]);\r\n    }\r\n    while (i < length) {\r\n        data[tempLow++] = tempArray[i++];\r\n        let change = [data[tempLow]];\r\n        steps.push([\r\n            [...data],\r\n        ]);\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default MergeSortDriver\r\n","C:\\Users\\callu\\WebstormProjects\\visualiser-new-clean-feb\\src\\Algorithms\\Radixsort.js",["102","103"],"import React from \"react\";\r\n\r\n\r\n//TEMP\r\nfunction Radixsort(orignalData){\r\n    let data = [...orignalData];\r\n\r\n    let RADIX;\r\n\r\n    // default radix is then because we usually count to base 10\r\n    if (RADIX === undefined || RADIX < 1) {\r\n        RADIX = 10\r\n    }\r\n\r\n\r\n\r\n    let steps = [];\r\n    let focus = [];\r\n\r\n    var maxLength = false\r\n    var placement = 1\r\n\r\n    while (!maxLength) {\r\n        maxLength = true\r\n        var buckets = []\r\n\r\n        for (var i = 0; i < RADIX; i++) {\r\n            buckets.push([])\r\n        }\r\n\r\n        for (var j = 0; j < data.length; j++) {\r\n            var tmp = data[j] / placement\r\n            buckets[Math.floor(tmp % RADIX)].push(data[j])\r\n\r\n            if (maxLength && tmp > 0) {\r\n                maxLength = false\r\n            }\r\n        }\r\n\r\n        var a = 0\r\n        for (var b = 0; b < RADIX; b++) {\r\n            var buck = buckets[b]\r\n            for (var k = 0; k < buck.length; k++) {\r\n                data[a] = buck[k]\r\n                a++\r\n                steps.push([...data])\r\n            }\r\n        }\r\n\r\n        placement *= RADIX\r\n        console.log(\"running\")\r\n    }\r\n    console.log(\"radix complete\")\r\n    return steps\r\n\r\n} export default Radixsort;\r\n",{"ruleId":"104","replacedBy":"105"},{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","severity":1,"message":"109","line":98,"column":13,"nodeType":"110","messageId":"111","endLine":98,"endColumn":17},{"ruleId":"112","severity":1,"message":"113","line":135,"column":9,"nodeType":"114","messageId":"115","endLine":152,"endColumn":10},{"ruleId":"116","severity":1,"message":"117","line":162,"column":35,"nodeType":"118","messageId":"119","endLine":162,"endColumn":37},{"ruleId":"116","severity":1,"message":"117","line":164,"column":41,"nodeType":"118","messageId":"119","endLine":164,"endColumn":43},{"ruleId":"120","severity":1,"message":"121","line":171,"column":9,"nodeType":"122","messageId":"123","endLine":171,"endColumn":40},{"ruleId":"116","severity":1,"message":"117","line":179,"column":30,"nodeType":"118","messageId":"119","endLine":179,"endColumn":32},{"ruleId":"116","severity":1,"message":"117","line":182,"column":33,"nodeType":"118","messageId":"119","endLine":182,"endColumn":35},{"ruleId":"108","severity":1,"message":"124","line":7,"column":11,"nodeType":"110","messageId":"111","endLine":7,"endColumn":22},{"ruleId":"125","severity":1,"message":"126","line":14,"column":5,"nodeType":"110","endLine":14,"endColumn":14,"suggestions":"127"},{"ruleId":"116","severity":1,"message":"117","line":18,"column":26,"nodeType":"118","messageId":"119","endLine":18,"endColumn":28},{"ruleId":"116","severity":1,"message":"128","line":18,"column":44,"nodeType":"118","messageId":"119","endLine":18,"endColumn":46},{"ruleId":"116","severity":1,"message":"117","line":25,"column":25,"nodeType":"118","messageId":"119","endLine":25,"endColumn":27},{"ruleId":"116","severity":1,"message":"128","line":41,"column":26,"nodeType":"118","messageId":"119","endLine":41,"endColumn":28},{"ruleId":"116","severity":1,"message":"117","line":135,"column":21,"nodeType":"118","messageId":"119","endLine":135,"endColumn":23},{"ruleId":"108","severity":1,"message":"129","line":153,"column":11,"nodeType":"110","messageId":"111","endLine":153,"endColumn":13},{"ruleId":"116","severity":1,"message":"117","line":170,"column":20,"nodeType":"118","messageId":"119","endLine":170,"endColumn":22},{"ruleId":"116","severity":1,"message":"117","line":181,"column":26,"nodeType":"118","messageId":"119","endLine":181,"endColumn":28},{"ruleId":"108","severity":1,"message":"130","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":13},{"ruleId":"116","severity":1,"message":"128","line":16,"column":25,"nodeType":"118","messageId":"119","endLine":16,"endColumn":27},{"ruleId":"116","severity":1,"message":"117","line":16,"column":27,"nodeType":"118","messageId":"119","endLine":16,"endColumn":29},{"ruleId":"116","severity":1,"message":"117","line":18,"column":33,"nodeType":"118","messageId":"119","endLine":18,"endColumn":35},{"ruleId":"116","severity":1,"message":"117","line":12,"column":20,"nodeType":"118","messageId":"119","endLine":12,"endColumn":22},{"ruleId":"108","severity":1,"message":"130","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":13},{"ruleId":"108","severity":1,"message":"130","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":13},{"ruleId":"108","severity":1,"message":"130","line":2,"column":8,"nodeType":"110","messageId":"111","endLine":2,"endColumn":13},{"ruleId":"108","severity":1,"message":"131","line":43,"column":13,"nodeType":"110","messageId":"111","endLine":43,"endColumn":19},{"ruleId":"108","severity":1,"message":"131","line":63,"column":13,"nodeType":"110","messageId":"111","endLine":63,"endColumn":19},{"ruleId":"108","severity":1,"message":"131","line":70,"column":13,"nodeType":"110","messageId":"111","endLine":70,"endColumn":19},{"ruleId":"108","severity":1,"message":"130","line":1,"column":8,"nodeType":"110","messageId":"111","endLine":1,"endColumn":13},{"ruleId":"108","severity":1,"message":"132","line":18,"column":9,"nodeType":"110","messageId":"111","endLine":18,"endColumn":14},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"no-unused-vars","'temp' is assigned a value but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'handleClick' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect contains a call to 'setIndex'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props, index, steps, complete, sort, speed] as a second argument to the useEffect Hook.",["135"],"Expected '!==' and instead saw '!='.","'gg' is assigned a value but never used.","'React' is defined but never used.","'change' is assigned a value but never used.","'focus' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},"Add dependencies array: [props, index, steps, complete, sort, speed]",{"range":"138","text":"139"},[2949,2949],", [props, index, steps, complete, sort, speed]"]